// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  name           String
  email          String          @unique
  password       String
  country        String?
  language       String?
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  role           Role            @default(USER)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  feedback       Feedback[]
  savedLocations SavedLocation[]

  @@index([email])
}
model Account {
  id                String   @id @default(cuid()) // Added explicit id field for clarity
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) // Changed @@id to @@unique for better clarity, as it's not a single primary key
  @@index([userId]) // Added index for better query performance on userId
}

model Session {
  id           String   @id @default(cuid()) // Added explicit id field
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId]) // Added index for performance
}

model VerificationToken {
  id        String   @id @default(cuid()) // Added explicit id field
  identifier String
  token     String
  expires   DateTime

  @@unique([identifier, token]) // Changed @@id to @@unique for composite uniqueness
}

model Service {
  id          String    @id @default(cuid())
  name        String
  type        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  locations   Location[]
}

model Location {
  id          String    @id @default(cuid())
  name        String
  lat         Float
  lng         Float
  address     String?
  city        String
  province    String
  postalCode  String?
  url         String?
  phone       String?
  serviceId   String
  service     Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  savedBy     SavedLocation[]
}

model SavedLocation {
  id         String   @id @default(cuid())
  userId     String
  locationId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@unique([userId, locationId])
}

model Feedback {
  id        String   @id @default(cuid())
  subject   String
  message   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  status    FeedbackStatus @default(PENDING)
}

model support {
  id        String   @id @default(cuid())
  name    String
  email    String
  topic   String
  message   String
  createdAt      DateTime  @default(now())

}


enum Role {
  USER
  ADMIN
}

enum FeedbackStatus {
  PENDING
  REVIEWED
  RESOLVED
}